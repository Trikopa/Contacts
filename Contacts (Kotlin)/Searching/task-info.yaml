type: edu
files:
- name: src/Main.kt
  visible: true
  text: |
    package contacts

    fun main() {
        println("Enter the name of the person:")
        val name = readln()
        println("Enter the surname of the person:")
        val surname = readln()
        println("Enter the number:")
        val number = readln()
        print("\nA record created!\nA Phone Book with a single record created!")
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.List;\nimport\
    \ java.util.function.Function;\n\n\nclass TestClue {\n\n    Function<String, CheckResult>\
    \ callback;\n\n    TestClue(Function<String, CheckResult> callback) {\n      \
    \  this.callback = callback;\n    }\n}\n\n\npublic class ContactsTest extends\
    \ StageTest<TestClue> {\n\n    private CheckResult splitActionsFeedback(int actualSize,\
    \ int needSize) {\n        if (actualSize < needSize) {\n            return CheckResult.wrong(String.format(\"\
    This test should contain at least %d actions, but you have only %d. \" +\n   \
    \                         \"You should separate your actions with an empty line.\"\
    ,\n                    needSize,\n                    actualSize));\n        }\
    \ else {\n            return null;\n        }\n    }\n    \n    @Override\n  \
    \  public List<TestCase<TestClue>> generate() {\n        return List.of (\n  \
    \          new TestCase<TestClue>()\n                .setInput(\"exit\")\n   \
    \             .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    enter action\")) {\n                        return new CheckResult(false,\n  \
    \                          \"No \\\"Enter action\\\" substring found in the output\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    0 records\")) {\n                        return new CheckResult(false,\n     \
    \                       \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    } else\
    \ if (infoBlock.contains(\"+0 (123) 456-789-9999\")\n                        \
    \    && infoBlock.contains(\"123 456 789\")\n                            && !infoBlock.contains(\"\
    +0 (123) 456-781-9999\")) {\n                        return CheckResult.correct();\n\
    \                    }\n                }\n                return new CheckResult(false,\n\
    \                        \"Search by phone number is not working\");\n       \
    \     }))\n        );\n    }\n\n    @Override\n    public CheckResult check(String\
    \ reply, TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/Organization.kt
  visible: true
  text: |+
    package contacts

    import java.time.LocalDateTime

    data class Organization(val name: String,
                            val address: String,
                            val phoneNumber: String,
                            override val isPerson: Boolean = false,
                            override val timeCreated: String,
                            override val timeLastEdited: String = LocalDateTime.now().toString(),
    ): Wrapper()
    {
        override fun toString(): String {
            return name
        }



        override fun infoForm() {
            println("""Organization name: $name
    Address: $address
    Number: $phoneNumber
    Time created: $timeCreated
    Time last edit: $timeLastEdited""")
        }
    }


  learner_created: true
- name: src/Person.kt
  visible: true
  text: |
    package contacts

    import java.time.LocalDateTime

    data class Person(val name: String,
                      val surname: String,
                      val number: String,
                      val birthDate: String,
                      val gender: String,
                      override val isPerson: Boolean = true,
                      override val timeCreated: String,
                      override val timeLastEdited: String = LocalDateTime.now().toString()
    ): Wrapper() {
        override fun toString(): String {
            return "$name $surname"
        }
        override fun infoForm() {
            println("""Name: $name
    Surname: $surname
    Birth date: $birthDate
    Gender: $gender
    Number: $number
    Time created: $timeCreated
    Time last edit: $timeLastEdited""")
        }
    }
  learner_created: true
- name: src/Utils.kt
  visible: true
  text: |-
    package contacts

    fun phoneNumberChecker(phoneNumber: String): String {
        val regex = Regex("\\+?\\d*\\s*(\\(\\w{1,3}\\))\\s*(\\w+)?[-\\s](\\w{2,})?[-\\s](\\w{2,})?|" +
                "\\+?\\d*\\s*(\\w{1,3})\\s*(\\w+)?[-\\s](\\w{2,})?[-\\s](\\w{2,})?|\\w{1,3}[\\s-]*(\\w{1,3})" +
                "|(\\(\\w{1,3}\\))" + "|(\\(\\w{1,3}\\))[\\s-]*(\\w{1,3})" + "|(\\w{1,3})[\\s-]*(\\(\\w{1,3}\\))" +
                "|(\\w{1,3})[\\s-]*(\\(\\w{1,3}\\))[\\s-]*(\\w{1,3})" + "|\\+?(\\(\\w+\\))" + "|\\d" + "|\\+?\\d+[\\s-]*(\\w+)")

        return if (regex.matches(phoneNumber)) {
            phoneNumber
        } else {
            println("Wrong number format!")
            "[no number]"
        }
    }

    fun genericParser(string: String, error: String): String {
        if (error == "Bad gender") {
            return genderParse(string)
        }

        if (error == "Wrong number format!") {
            return phoneNumberChecker(string)
        }

        if (string.isEmpty()) {
            println(error)
            return "[no data]"
        }
        return string
    }


    fun genderParse(gender: String): String {
        if (gender != "M" && gender != "F") {
            println("Bad gender!")
            return "[no data]"
        }
        return gender
    }
  learner_created: true
- name: src/Wrapper.kt
  visible: true
  text: |+
    package contacts

    abstract class Wrapper {
        abstract val isPerson: Boolean
        abstract val timeCreated: String
        abstract val timeLastEdited: String


        abstract fun infoForm()
    }

  learner_created: true
- name: src/PhoneBook.kt
  visible: true
  text: |
    package contacts

    import java.time.LocalDateTime


    fun ask(message: String): String {
        print(message)
        return readln()
    }

    fun multipleAsk(messages: List<String>, errorMessages: List<String> = listOf()): List<String> {
        val newData = mutableListOf<String>()
        for (i in messages.indices) {
            print(messages[i])
            newData.add(genericParser(readln(), errorMessages[i]))
        }
        return newData
    }

    class PhoneBook: Actions {
        private val listOfAll: MutableList<Wrapper> = mutableListOf()

        fun action() {
            while (true) {
                when (ask("Enter action (add, remove, edit, count, info, exit): ")) {
                    "add" -> addWrapper()
                    "remove" -> remove()
                    "edit" -> edit()
                    "count" -> count()
                    "info" -> info()
                    "exit" -> break
                }
            }
        }

        private fun addPerson() {
            val messages = listOf("Enter the name: ",
                "Enter the surname: ",
                "Enter the birth date: ",
                "Enter the gender (M, F): ",
                "Enter the number: ")
            val errorMessages = listOf("Bad name!", "Bad surname!", "Bad birth date!", "Bad gender!", "Wrong number format!")
            val (name, surname, birthDate, gender, number) = multipleAsk(messages = messages, errorMessages =  errorMessages)
            listOfAll.add(Person(
                name = name, surname =  surname, birthDate = birthDate, number = number,
                gender =  gender, timeCreated = LocalDateTime.now().toString()))
                .also { println("The record added.\n") }
        }

        private fun addOrganisation() {
            val messages = listOf(
                "Enter the organization name: ",
                "Enter the address: ",
                "Enter the number:"
                )
            val errorMessages = listOf("", "", "")
            val (name, address, number) = multipleAsk(messages = messages, errorMessages = errorMessages)
            listOfAll.add(Organization(name, address, phoneNumberChecker(number),
                timeCreated = LocalDateTime.now().toString()))
                .also { println("The record added.\n") }

        }

        private fun editOrganisation(record: Int) {
            val clone = listOfAll[record] as Organization
            when(ask("Select a field (address, number): ")) {
                "organisation name" -> listOfAll[record] = clone.copy(name = ask("Enter the organization name: "),
                    timeLastEdited = LocalDateTime.now().toString() )
                "address" -> listOfAll[record] = clone.copy(address = ask("Enter the address: "),
                    timeLastEdited = LocalDateTime.now().toString())
                    .also { println("The record updated!") }
                "number" -> listOfAll[record] = clone.copy(phoneNumber = phoneNumberChecker(ask("Enter the number: ")),
                    timeLastEdited = LocalDateTime.now().toString())
                    .also { println("The record updated!") }
            }

        }

        private fun editPerson(record: Int) {
            val clone = listOfAll[record] as Person
            when(ask("Select a field (name, surname, birth, gender, number): ")) {
                "name" -> listOfAll[record] = clone.copy(name = ask("Enter name: "),
                    timeLastEdited = LocalDateTime.now().toString())
                    .also { println("The record updated!") }
                "surname" -> listOfAll[record] = clone.copy(surname = ask("Enter surname: "),
                    timeLastEdited = LocalDateTime.now().toString())
                    .also { println("The record updated!") }
                "number" ->  {
                    val number = ask("Enter number: ")
                    listOfAll[record] = clone.copy(number = phoneNumberChecker(number),
                        timeLastEdited = LocalDateTime.now().toString())
                    println("The record updated!")
                }
                "birth" -> listOfAll[record] = clone.copy(birthDate = ask("Enter birth date: "),
                    timeLastEdited = LocalDateTime.now().toString())
                    .also { println("The record updated!") }
                "gender" -> listOfAll[record] = clone.copy(gender = ask("Enter the gender: "),
                    timeLastEdited = LocalDateTime.now().toString())
                    .also { println("The record updated!") }
                else -> println("Invalid")
            }
        }

        private fun remove() {
            if (listOfAll.isEmpty()) {
                println("No records to remove!")
                return
            }
            info()
            listOfAll.removeAt(ask("Select a record:").toInt() - 1)
            println("The record removed!")

        }
        private fun count() {
            println("The Phone Book has ${listOfAll.size} records.")
        }

        private fun list() {
            for ((i,e) in listOfAll.withIndex()) {
                println("${i + 1}. $e")
            }
        }
        private fun info() {
           list()
            val index = ask("Enter index to show info: ").toInt() - 1
            val rec = listOfAll[index]
            rec.infoForm()
            println()
        }

        override fun addWrapper() {
            when (ask("Enter the type (person, organization): ")) {
                "person" -> addPerson()
                "organization" -> addOrganisation()
                else -> println("Wrong type")
            }
        }

        override fun edit() {
            if (listOfAll.isEmpty()) {
                println("No records to edit!")
                return
            }
            list()
            val record = ask("Select a record:").toInt() - 1
            val rec = listOfAll[record]
            if (rec.isPerson) {
                editPerson(record)
            } else {
                editOrganisation(record)
            }
            println()
        }

        override fun removeWrapper() {

        }

        override fun listOfAll() {

        }
    }
  learner_created: true
- name: src/Constants.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/20391#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 17 May 2023 17:59:52 UTC"
record: -1
